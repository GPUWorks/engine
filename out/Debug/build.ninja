cc = cc
cxx = c++
ld = $cc
ldxx = $cxx
ar = ar
nm = nm
readelf = readelf

pool link_pool
  depth = 1

rule cc
  command = $cc -MMD -MF $out.d $defines $includes $cflags $cflags_c $cflags_pch_c -c $in -o $out
  description = CC $out
  depfile = $out.d
  deps = gcc
rule cc_s
  command = $cc $defines $includes $cflags $cflags_c $cflags_pch_c -c $in -o $out
  description = CC $out
rule cxx
  command = $cxx -MMD -MF $out.d $defines $includes $cflags $cflags_cc $cflags_pch_cc -c $in -o $out
  description = CXX $out
  depfile = $out.d
  deps = gcc
rule alink
  command = rm -f $out && $ar rcs $arflags $out $in
  description = AR $out
rule alink_thin
  command = rm -f $out && $ar rcsT $arflags $out $in
  description = AR $out
rule solink
  command = if [ ! -e $lib -o ! -e $lib.TOC ]; then $ld -shared $ldflags -o $lib -Wl,-soname=$soname @$link_file_list $
      && { $readelf -d $lib | grep SONAME ; $nm -gD -f p $lib | cut -f1-2 -d' '; } > $lib.TOC; else $ld -shared $
      $ldflags -o $lib -Wl,-soname=$soname @$link_file_list && { $readelf -d $lib | grep SONAME ; $nm -gD -f p $lib | $
      cut -f1-2 -d' '; } > $lib.tmp && if ! cmp -s $lib.tmp $lib.TOC; then mv $lib.tmp $lib.TOC ; fi; fi
  description = SOLINK $lib
  pool = link_pool
  restat = 1
  rspfile = $link_file_list
  rspfile_content = -Wl,--whole-archive $in $solibs -Wl,--no-whole-archive $libs
rule solink_module
  command = if [ ! -e $lib -o ! -e $lib.TOC ]; then $ld -shared $ldflags -o $lib -Wl,-soname=$soname @$link_file_list $
      && { $readelf -d $lib | grep SONAME ; $nm -gD -f p $lib | cut -f1-2 -d' '; } > $lib.TOC; else $ld -shared $
      $ldflags -o $lib -Wl,-soname=$soname @$link_file_list && { $readelf -d $lib | grep SONAME ; $nm -gD -f p $lib | $
      cut -f1-2 -d' '; } > $lib.tmp && if ! cmp -s $lib.tmp $lib.TOC; then mv $lib.tmp $lib.TOC ; fi; fi
  description = SOLINK(module) $lib
  pool = link_pool
  restat = 1
  rspfile = $link_file_list
  rspfile_content = -Wl,--start-group $in -Wl,--end-group $solibs $libs
rule link
  command = $ld $ldflags -o $out -Wl,--start-group $in -Wl,--end-group $solibs $libs
  description = LINK $out
  pool = link_pool
rule stamp
  command = ${postbuilds}touch $out
  description = STAMP $out
rule copy
  command = ln -f $in $out 2>/dev/null || (rm -rf $out && cp -af $in $out)
  description = COPY $in $out

subninja obj/engine/vr_engine.ninja
subninja obj/samples/inventory.ninja
subninja obj/samples/sprites.ninja
subninja obj/samples/ui.ninja
subninja obj/samples/fonts.ninja
subninja obj/samples/sprite_interface.ninja
subninja obj/samples/movable_sprite.ninja
subninja obj/samples/sobel.ninja
subninja obj/samples/shaders.ninja
subninja obj/samples/models.ninja
subninja obj/samples/xsystem.ninja
subninja obj/samples/screen_modes.ninja
subninja obj/samples/splatting.ninja
subninja obj/samples/tiling.ninja
subninja obj/samples/sprite_animation.ninja
subninja obj/samples/device_caps.ninja
subninja obj/build/all.ninja

# Short names for targets.
build vr_engine: phony obj/engine/libvr_engine.a
build all: phony obj/build/all.actions_depends.stamp

build all: phony sprite_animation tiling xsystem splatting sobel models fonts movable_sprite screen_modes $
    sprite_interface ui inventory obj/build/all.actions_depends.stamp shaders sprites device_caps $
    obj/engine/libvr_engine.a
default all
