// Copyright (c) 2017 The Smart Authors.
// All rights reserved.

#ifndef __VE_DYNAMIC_HUFFMAN_H__
#define __VE_DYNAMIC_HUFFMAN_H__

#include <vector>

#include "engine/common.h"

namespace ve {

/**
    Constructs dynamic Huffman's tree from the defale algorithm.

    Input for this tree: Length of the symbol codes in bits.

    Output: Huffman tree constructed for symbols using these lengths.
    @see Dynamics Huffman trees in deflate data format.
*/
class DynamicHuffmanTree {
private:
  /** Length of codes */
  std::vector<int> lengths;

  /** symbols codes */
  std::vector<int> codes;

  /** Structure to speed up exists function */
  std::vector< std::vector< std::pair<int, int> > > lengthToCode;

public:
  /**
      Default constructor.
      Sets all the code lengths to zero values.
      Prepares table for 'size' symbols.
      @param size - Number of symbols that this tree will hold.
  */
  DynamicHuffmanTree(int size);

  /**
    Sets all lengths to zero.
  */
  void reset();

  /**
      Set length of the code symbol.
      @param symbol - Symbol to set code length for.
      @param length - Length of the code for the given symbol.
      @return OK if length was set correctly.
      @return INVALID_VALUE if symbol is out of bounds or length is negative.
  */
  Outcome setLength(uint symbol, uint length);

  /**
      Returns code length for a given symbol.
      @return Code length for a given symbol.
      @return -1 if symbol is out of bounds.
  */
  int getLength(uint symbol);

  /**
      Sets code length for group of successive symbols starting
      from a given symbol.
      @param startSymbol - Symbol to start from.
      @param count - Number of symbols to set code length for.
      @param length - Code length to set.
      @return OK if operation suceeded.
      @return INVALID_VALUE if at least any symbol is out of bounds.
  */
  Outcome fill(uint startSymbol, uint count, uint length);

  /**
      Generates codes for symbols using code lengths table which was
      set before this call.
      @return OK if codes were computed successfully.
      @return non-OK if error occurred.
  */
  Outcome genCodes();

  /**
    Prepares data to successive exists() calls. Must be called if codes and
    lengths were set manually and no need in calling this function if tree
    was generated by genCodes() function.
          @return OK if preparation succeeded.
          @return non-OK if error occurred.
  */
  Outcome prepare();

  /**
      Returns code of the symbol. genCodes() must be called prior to this call.
      @param symbol - Symbol to return Humman's code for.
      @return Code of the given symbol.
  */
  uint getCode(uint symbol);

  /**
      Changes code for a given symbol.
      @param symbol - Symbol to change Humman's code for.
      @param code - New code for symbol
      @return OK if change succeeded.
      @return INVALID_VALUE if symbol is out of range.
  */
  Outcome setCode(uint symbol, uint code);

  /**
      Checks if given code with specified bit length exists in this Huffman tree.
      @return Symbol if it exists in this tree.
      @return -1 if there is no symbol with such code and bit length.
  */
  int exists(uint code, uint length);
};

}

#endif // __VE_DYNAMIC_HUFFMAN_H__
